generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64", "linux-musl-openssl-3.0.x", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum CallDirection {
  Inbound
  Outbound
}

model Test {
  id Int @id @default(autoincrement())
}

model ClientPhone {
  id         String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime? 

  phoneId String @unique()
  phoneNumber String
  provider String

  client Client? @relation(fields: [clientId], references: [id])
  clientId String?

  assistants Assistant[]
}

//Inbound
//Client phone with phone id
//Select the assitant to use
//merge base, prompt, knowledgeBase and tools
//run preCallFunctions in order to replace the name holders with the values they return
//return the json to vapi
//run postCallFunctions using the information of the ended call

//Outbound
//Other part of the system make a request to the server to make a call
//Client phone with phone id
//Select the assitant to use
//merge base, prompt, knowledgeBase and tools
//run preCallFunctions in order to replace the name holders with the values they return
//post to vapi api /call
//run postCallFunctions using the information of the ended call

model Assistant {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime? 

  direction CallDirection 
  version String 

  base Json
  prompt String
  knowledgeBase String

  tools Json
  preCallFunctions Json? //list of names/ids of the functions of each client // sendWhatsapp
  postCallFunctions Json? //list of names/ids of the functions of each client // sendWhatsapp

  clientPhone ClientPhone @relation(fields: [clientPhoneId], references: [id])
  clientPhoneId String @unique()

  @@id([clientPhoneId, direction, version]) //Always have to select the last version
}

model Client {
  id         String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime? 

  masterClientId String @unique

  name String
  orgId String
  balance Float
  industry String
  email String
  contactNumber String

  clientsPhones ClientPhone[]
  customers Customer[]
  billings Billing[]
}


model CallLog {
  id         String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime? 

  timestamp DateTime
  orgId String
  endedReason String
  structuredData Json
  name String
  // assistant 
}

model Customer {
  id         String   @id @default(uuid())
  code        String   @unique()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime? 

  sipUri   String? @unique
  
  number String
  phoneId String @unique()
  name String
  apiToken String

  client Client? @relation(fields: [clientId], references: [id])
  clientId String?
}

model Billing {
  id         String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime? 

  amount Float
  currency String
  billingDate DateTime


  client Client? @relation(fields: [clientId], references: [id])
  clientId String?

  prepaidBilling PrePaidBilling?
  postpaidBilling PostPaidBilling?
}

model PrePaidBilling {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime? 

  balanceRemaining Float
  rechargeAmount Float
  lastRechargeDate DateTime

  billing Billing @relation(fields: [billingId], references: [id])
  billingId String @id @unique()
}

model PostPaidBilling {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime? 

  dueDate DateTime
  creditLimit Float
  overdueChanges Float
  billingCycle String
  lastPaymentDate DateTime

  billing Billing @relation(fields: [billingId], references: [id])
  billingId String @id @unique()
}

model Admin {
  id         String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt  DateTime? 

  username String @unique()
  email String
  password String
  phoneNumber String
}